@page "/teams"
@inject IHttpClientFactory HttpClientFactory

<h3>Teams</h3>

<div class="form-group">
    <a class="btn btn-success" href="teams/create"><i class="oi oi-plus"></i> Create New</a>
</div>

@if (teams == null)
{
    <text>Loading...</text>
}
else if (teams.Length == 0)
{
    <text>No records found.</text>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Description</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (Team team in teams)
            {
                <tr>
                    <td>@team.ID</td>
                    <td>@team.Name</td>
                    <td>@team.Description</td>
                    @*<td>
                        <a class="btn btn-success" href="developer/edit/@dev.Id">Edit</a>
                        <button class="btn btn-danger" @onclick="@(() => Delete(dev.Id))">Delete</button>
                    </td>*@
                    <td>
                        <a class="btn btn-info" href="teams/memberships/@team.ID">Members</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    Team[] teams { get; set; }
    protected override async Task OnInitializedAsync()
    {
        var httpClient = HttpClientFactory.CreateClient("TeamManagement.AnonymousAPI");
        teams = await httpClient.GetFromJsonAsync<Team[]>("api/Teams");
    }
    //async Task Delete(int developerId)
    //{
    //    var dev = developers.First(x => x.Id == developerId);
    //    if (await js.InvokeAsync<bool>("confirm", $"Do you want to delete {dev.FirstName}'s ({dev.Id}) Record?"))
    //    {
    //        await client.DeleteAsync($"api/developer/{developerId}");
    //        await OnInitializedAsync();
    //    }
    //}
}
